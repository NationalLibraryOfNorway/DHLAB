name: Release

on:
  workflow_dispatch:
    inputs:
      version_bump_command: 
        description: 'Type of semantic version bump'
        required: true
        type: choice
        options:
          - major
          - minor
          - patch
      no_release:
        description: "Don't create a Github Release or tag with the new version number"
        required: true
        type: boolean
      no_publish:
        description: "Don't publish the new version to pypi"
        required: true
        type: boolean

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    environment:
      name: deploy
    permissions:
      contents: write
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          ref: ${{ github.head_ref }}

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true

      - name: Install Python
        run: uv python install 3.12

      - name: Bump version and add to env vars
        id: bump-version
        run: |
          uv version --bump ${{ inputs.version_bump_command }}
          echo "NEW_VERSION=$( uv version --short )" >> "$GITHUB_ENV"

      - name: Check if version is pre-release
        id: check-version
        run: |
          [[ "$NEW_VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]] || echo prerelease=true >> "$GITHUB_OUTPUT"

      - name: Commit the changes to pyproject.toml
        if: ${{ !inputs.no_release }}
        uses: stefanzweifel/git-auto-commit-action@v6
        with:
          commit_message: "ci: bump version to ${{ env.NEW_VERSION }} [skip-ci]"
          file_pattern: 'pyproject.toml'
  
      - name: Create and push tag
        if: ${{ !inputs.no_release }}
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.2
        with:
          github_token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          default_bump: false
          default_prerelease_bump: false
          custom_tag: ${{ env.NEW_VERSION }} 
  
      - name: Build project
        run: uv build

      - name: Create Release
        if: ${{ !inputs.no_release }}
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          tag: ${{ steps.tag_version.outputs.new_tag }}
          skipIfReleaseExists: true
          draft: false
          allowUpdates: true
          generateReleaseNotes: false
          body: ${{ steps.tag_version.outputs.changelog }}
          artifacts: "dist/*"
          prerelease: steps.check-version.outputs.prerelease == 'true'

      - name: Publish to testPyPI
        if: ${{ !inputs.no_publish }}
        run: uv publish --index testpypi

      - name: Publish to Pypi
        if: ${{ !inputs.no_publish }}
        run: uv publish
